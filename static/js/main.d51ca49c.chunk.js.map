{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","templates","setTemplates","template","setTemplate","topText","setTopText","bottomText","setBottomText","meme","setMeme","useEffect","fetch","then","x","json","response","data","memes","src","alt","style","width","onSubmit","e","a","preventDefault","template_id","id","text0","text1","url","console","log","key","name","placeholder","onChange","target","value","type","onClick","window","location","reload","map","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"8NA8EeA,MA1Ef,WAAe,IAAD,EAEsBC,mBAAS,IAF/B,mBAELC,EAFK,KAEMC,EAFN,OAGoBF,mBAAS,MAH7B,mBAGLG,EAHK,KAGKC,EAHL,OAIkBJ,mBAAS,IAJ3B,mBAILK,EAJK,KAIIC,EAJJ,OAKwBN,mBAAS,IALjC,mBAKLO,EALK,KAKOC,EALP,OAMYR,mBAAS,MANrB,mBAMLS,EANK,KAMCC,EAND,KA0BR,OAjBJC,qBAAU,WACMC,MAAM,qCAAqCC,MAAK,SAAAC,GAAC,OACjDA,EAAEC,OAAOF,MAAK,SAAAG,GAAQ,OAAGd,EAAac,EAASC,KAAKC,eAE1D,IAcF,6BACGT,GAAQ,yBAAKU,IAAKV,EAAMW,IAAI,YAAWC,MAAO,CAACC,MAAO,OACtDnB,GACD,0BAAMoB,SAAQ,uCAAI,WAAMC,GAAN,uBAAAC,EAAA,6DAChBD,EAAEE,iBADc,SAGG,WACA,WACXC,EAAcxB,EAASyB,GACvBC,EAAQxB,EACRyB,EAAQvB,EAPA,SAQSK,MAAM,qDAAD,OAAsDe,EAAtD,qBALX,WAKW,qBAJX,WAIW,kBAAqHE,EAArH,kBAAoIC,IARlJ,cAQRd,EARQ,iBASOA,EAASD,OAThB,QASNN,EATM,OAUZC,EAAQD,EAAKQ,KAAKc,KAVN,kDAaJC,QAAQC,IAAR,MAbI,0DAAJ,uDAgBZ,yBACId,IAAKhB,EAAS4B,IAAKV,MAAO,CAACC,MAAO,KAClCY,IAAK/B,EAASyB,GACdR,IAAKjB,EAASgC,OAClB,2BAAOC,YAAY,WAAYC,SA/BjB,SAAAb,GACtBlB,EAAYkB,EAAEc,OAAOC,UA+Bb,2BAAOH,YAAY,cAAcC,SA7BhB,SAAAb,GACzBhB,EAAegB,EAAEc,OAAOC,UA6BhB,4BAAQC,KAAK,UAAb,UACA,4BAAQC,QAtCJ,WACQC,OAAOC,SAASC,WAqC5B,YAEAzC,GAAY,4CACVA,GACFF,EAAU4C,KAAI,SAAA1C,GACV,OAAQ,yBACRkB,MAAO,CAACC,MAAO,KACfY,IAAK/B,EAASyB,GACdT,IAAKhB,EAAS4B,IACdX,IAAKjB,EAASgC,KACdM,QAAS,WAAKrC,EAAYD,WCvDxB2C,QACW,cAA7BJ,OAAOC,SAASI,UAEe,UAA7BL,OAAOC,SAASI,UAEhBL,OAAOC,SAASI,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3C,MAAK,SAAA4C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5B,QAAQ4B,MAAMA,EAAMC,a","file":"static/js/main.d51ca49c.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport './App.css';\n\n\nfunction App(){\n\n  const [templates, setTemplates] = useState([]);\n  const [template, setTemplate] = useState(null);\n  const [topText, setTopText] = useState('');\n  const [bottomText, setBottomText] = useState('');\n  const [meme, setMeme] = useState(null);\n  \n\n  useEffect(()=>{\n                  fetch(\"https://api.imgflip.com/get_memes\").then(x=>\n                  x.json().then(response=> setTemplates(response.data.memes)));\n                },\n            []);\n\n  const refresh = () => {\n                          window.location.reload()\n                        };\n\n     const handleChangeTop= e =>{\n      setTopText (e.target.value);\n     }\n     const handleChangeBottom= e =>{\n      setBottomText (e.target.value);\n     }                  \n\n      return(\n          <div>\n            {meme && <img src={meme} alt='your meme'style={{width: 500}}/>}\n            {template && (\n            <form onSubmit = {async e =>{\n              e.preventDefault(); \n              try {\n                  let username = 'laureeee';\n                  let password = '1qaz2wsx';\n                  let template_id = template.id;\n                  let text0 = topText;\n                  let text1 = bottomText;\n                  let response = await fetch(`https://api.imgflip.com/caption_image?template_id=${template_id}&username=${username}&password=${password}&text0=${text0}&text1=${text1}`);\n                  const meme = await response.json();\n                  setMeme(meme.data.url);\n                  }\n              catch(err)  {\n                          console.log(err);\n                          }\n                        }}>\n              <img \n                  src={template.url} style={{width: 200}} \n                  key={template.id}\n                  alt={template.name}/>\n              <input placeholder='top text'  onChange = {handleChangeTop} />\n              <input placeholder='bottom text' onChange = {handleChangeBottom} />\n              <button type='submit'>submit</button>\n              <button onClick={refresh}>return</button>\n            </form>)}\n            {!template && <h1>Pick a meme</h1>}\n              {!template &&\n              templates.map(template=>{\n                  return (<img \n                  style={{width: 200}} \n                  key={template.id} \n                  src={template.url} \n                  alt={template.name}\n                  onClick={()=>{setTemplate(template)\n                    \n                  }}\n                />)\n                })\n              }\n          </div>\n      )\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}